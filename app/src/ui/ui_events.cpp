// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.0
// LVGL version: 8.3.6
// Project name: Thermostat

#include "thermostat.hpp"
#include "ui.h"
#include "version.h"

#define screenWidth 320
TaskHandle_t ntScanTaskHandler = NULL;

void tftUpdateTempSet(lv_event_t * e)
{
//  char tmp[16];
//  strncpy(tmp, lv_label_get_text(ui_SetTemp), sizeof(tmp));

  OperatingParameters.tempSet = (float)(lv_arc_get_value(ui_TempArc)) / 10.0;
  Serial.printf ("Current temp set to: %.1f\n", OperatingParameters.tempSet);

//  OperatingParameters.tempSet = tmp)/10);
  tftWakeDisplay(false);
}

void tftDecreaseSetTemp(lv_event_t * e)
{
  if (OperatingParameters.tempUnits == 'C')
  {
    OperatingParameters.tempSet -= 0.5;
    OperatingParameters.tempSet = roundValue(OperatingParameters.tempSet, 1);
  } else {
    OperatingParameters.tempSet -= 1.0;
    OperatingParameters.tempSet = roundValue(OperatingParameters.tempSet, 0);
  }
  lv_arc_set_value(ui_TempArc, OperatingParameters.tempSet*10);
  lv_label_set_text_fmt(ui_SetTemp, "%d°", int(OperatingParameters.tempSet));
  if (OperatingParameters.tempUnits == 'C')
    lv_label_set_text_fmt(ui_SetTempFrac, "%d", getRoundedFrac(OperatingParameters.tempSet));

  Serial.printf ("Temp decreased to: %.1f\n", OperatingParameters.tempSet);
}

void tftIncreaseSetTemp(lv_event_t * e)
{
  if (OperatingParameters.tempUnits == 'C')
  {
    OperatingParameters.tempSet += 0.5;
    OperatingParameters.tempSet = roundValue(OperatingParameters.tempSet, 1);
  } else {
    OperatingParameters.tempSet += 1.0;
    OperatingParameters.tempSet = roundValue(OperatingParameters.tempSet, 0);
  }
  lv_arc_set_value(ui_TempArc, OperatingParameters.tempSet*10);
  lv_label_set_text_fmt(ui_SetTemp, "%d°", int(OperatingParameters.tempSet));
  if (OperatingParameters.tempUnits == 'C')
    lv_label_set_text_fmt(ui_SetTempFrac, "%d", getRoundedFrac(OperatingParameters.tempSet));


  Serial.printf ("Temp increased to: %.1f\n", OperatingParameters.tempSet);
}

void tftHvacModeChange(lv_event_t * e)
{
//  OperatingParameters.hvacSetMode = (HVAC_MODE)(lv_dropdown_get_selected(ui_ModeDropdown));
//  OperatingParameters.hvacSetMode = getHvacMode();
  char mode[12];
  lv_dropdown_get_selected_str(ui_ModeDropdown, mode, sizeof(mode));
  OperatingParameters.hvacSetMode = strToHvacMode(mode);

  switch (OperatingParameters.hvacSetMode)
  {
    // Set color of outer ring to represent set mode
    case HEAT: lv_obj_set_style_bg_color(ui_SetTempBg1, lv_color_hex(0xc71b1b), LV_PART_MAIN); break;
    case COOL: lv_obj_set_style_bg_color(ui_SetTempBg1, lv_color_hex(0x1b7dc7), LV_PART_MAIN); break;
    case FAN:  lv_obj_set_style_bg_color(ui_SetTempBg1, lv_color_hex(0x23562b), LV_PART_MAIN); break;  //@@@
    case AUTO: lv_obj_set_style_bg_color(ui_SetTempBg1, lv_color_hex(0xaeac40), LV_PART_MAIN); break;
    default:   lv_obj_set_style_bg_color(ui_SetTempBg1, lv_color_hex(0x7d7d7d), LV_PART_MAIN); break;
  }
  
  tftWakeDisplay(true);
}

void tftAwaken(lv_event_t * e)
{
  tftWakeDisplay(true);
}

void tftStopTouchTimer(lv_event_t * e)
{
  tftDisableTouchTimer();
}

void tftBeep(lv_event_t * e)
{
  audioBeep();
}

void wifiScanner(void *pvParameters)
{
  WiFi_ScanSSID();

  lv_dropdown_set_options(ui_SsidDropdown, Get_WiFiSSID_DD_List());
  lv_label_set_text(ui_WifiStatusLabel, "Scan Done");
  ui_WifiStatusLabel_timestamp = millis();
  lv_obj_clear_state(ui_ScanBtn, LV_STATE_DISABLED);
  audioBeep();

  ntScanTaskHandler = NULL;
  vTaskDelete(NULL);
}

static void networkScanner() {
  xTaskCreate(wifiScanner,
              "ScanWifiTask",
              4096,
              NULL,
              1,
              &ntScanTaskHandler);
}

void StartWifiScan(lv_event_t * e)
{
  audioBeep();
  lv_obj_add_state(ui_ScanBtn, LV_STATE_DISABLED);
  lv_label_set_text(ui_WifiStatusLabel, "Scanning...");

  // Scan for SSIDs. This is done synchronously, so complete it via a RTOS task.
  networkScanner();
}

void stopWifiScan(lv_event_t * e)
{
  if (ntScanTaskHandler != NULL)
  {
    vTaskDelete(ntScanTaskHandler);
    ntScanTaskHandler = NULL;
  }
  lv_label_set_text(ui_WifiStatusLabel, "Scan Aborted");
  ui_WifiStatusLabel_timestamp = millis();
  lv_obj_clear_state(ui_ScanBtn, LV_STATE_DISABLED);
}

#define LABEL_COLOR "#850808"

void LoadInfoStrings(lv_event_t * e)
{
  if (wifiConnected())
    lv_obj_add_state(ui_WifiConnCheckBox, LV_STATE_CHECKED);
	else
    lv_obj_clear_state(ui_WifiConnCheckBox, LV_STATE_CHECKED);
  lv_label_set_recolor(ui_WifiSsidLabel, true);
  lv_label_set_text_fmt(ui_WifiSsidLabel, "%s SSID:# %s", LABEL_COLOR, WifiCreds.ssid);

  lv_label_set_recolor(ui_HostnameLabel, true);
  lv_label_set_text_fmt(ui_HostnameLabel, "%s Hostname:# %s", LABEL_COLOR, WifiCreds.hostname);

  lv_label_set_recolor(ui_IPLabel, true);
  lv_label_set_text_fmt(ui_IPLabel, "%s IP:# %s", LABEL_COLOR, wifiAddress());

  lv_label_set_recolor(ui_RssiLabel, true);
  lv_label_set_text_fmt(ui_RssiLabel, "%s Signal:# %d%%", LABEL_COLOR, wifiSignal());

  lv_label_set_recolor(ui_FwVersionLabel, true);
  lv_label_set_text_fmt(ui_FwVersionLabel, "%s Firmware:# %s", LABEL_COLOR, VERSION_STRING);

  lv_label_set_recolor(ui_BuildDateLabel, true);
  lv_label_set_text_fmt(ui_BuildDateLabel, "%s Build date:# %s", LABEL_COLOR, VERSION_BUILD_DATE_TIME);

//  lv_label_set_long_mode(ui_CopyrightLabel, LV_LABEL_LONG_SCROLL_CIRCULAR);
  lv_obj_set_width(ui_CopyrightLabel, screenWidth - 2);
  lv_label_set_text_fmt(ui_CopyrightLabel, "%s", VERSION_COPYRIGHT);
}

void tftUpdateTempCorrectionValue(lv_event_t * e)
{
  lv_obj_t * slider = lv_event_get_target(e);
  char buf[8];
  lv_snprintf(buf, sizeof(buf), "%.1f°", (float)lv_slider_get_value(slider)/10.0);
  lv_label_set_text(ui_TempCorrectionLabel, buf);
  OperatingParameters.tempCorrection = (float)lv_slider_get_value(slider)/10.0;
}

void tftUpdateTempSwingValue(lv_event_t * e)
{
  lv_obj_t * slider = lv_event_get_target(e);
  char buf[8];
  lv_snprintf(buf, sizeof(buf), "%.1f°", (float)lv_slider_get_value(slider)/10.0);
  lv_label_set_text(ui_TempSwingLabel, buf);
  OperatingParameters.tempSwing = (float)lv_slider_get_value(slider)/10.0;
}

void tftUpdateUiSleepValue(lv_event_t * e)
{
  lv_obj_t * slider = lv_event_get_target(e);
  char buf[8];
  lv_snprintf(buf, sizeof(buf), "%d s", lv_slider_get_value(slider));
  lv_label_set_text(ui_UiSleepLabel, buf);
  OperatingParameters.thermostatSleepTime = lv_slider_get_value(slider);
}

void tftSetNewWifi(lv_event_t * e)
{
  lv_dropdown_get_selected_str(ui_SsidDropdown, WifiCreds.ssid, sizeof(WifiCreds.ssid));
  strcpy (WifiCreds.password, lv_textarea_get_text(ui_PSK));
  // Save the new wifi credentials to NVRAM
  setWifiCreds();
  // Initiate a disconnect so the new wifi info will be used when auto-reconnect happens
  WifiDisconnect();
}

void tftClearPsk(lv_event_t * e)
{
  lv_textarea_set_text(ui_PSK, "");
}

void SaveConfigSettings(lv_event_t * e)
{
  if (lv_obj_has_state(ui_TempUnitsSwitch, LV_STATE_CHECKED))
  {
    // Switch to Celcius
    if (OperatingParameters.tempUnits == 'F')
    {
      OperatingParameters.tempSet = (OperatingParameters.tempSet - 32.0) / (9.0/5.0);
      OperatingParameters.tempCurrent = (OperatingParameters.tempCurrent - 32.0) / (9.0/5.0);
      OperatingParameters.tempCorrection = OperatingParameters.tempCorrection * 5.0 / 9.0;
      OperatingParameters.tempSwing = OperatingParameters.tempSwing * 5.0 / 9.0;
      resetTempSmooth();
    }
    OperatingParameters.tempUnits = 'C';
    lv_arc_set_range(ui_TempArc, 7*10, 33*10);
    lv_obj_clear_flag(ui_SetTempFrac, LV_OBJ_FLAG_HIDDEN);
  } else {
    // Switch to Fahrenheit
    if (OperatingParameters.tempUnits == 'C')
    {
      OperatingParameters.tempSet = (OperatingParameters.tempSet * 9.0/5.0) + 32.0;
      OperatingParameters.tempCurrent = (OperatingParameters.tempCurrent * 9.0/5.0) + 32.0;
      OperatingParameters.tempCorrection = OperatingParameters.tempCorrection * 1.8;
      OperatingParameters.tempSwing = OperatingParameters.tempSwing * 1.8;
      resetTempSmooth();
    }
    OperatingParameters.tempUnits = 'F';
    lv_arc_set_range(ui_TempArc, 45*10, 92*10);
    lv_obj_add_flag(ui_SetTempFrac, LV_OBJ_FLAG_HIDDEN);
  }

  // Update current temp
  // Do not use getTemp() since it won't have any data yet.
  lv_label_set_text_fmt(ui_TempLabel, "%d°", int(OperatingParameters.tempCurrent));
  // Update temp set arc
  lv_arc_set_value(ui_TempArc, OperatingParameters.tempSet*10);
  // ...and finally the text for the set temp
  lv_label_set_text_fmt(ui_SetTemp, "%d°", int(OperatingParameters.tempSet));
  if (OperatingParameters.tempUnits == 'C')
  {
    // Set smaller fractional part of temp rounded to nearest .5
    lv_label_set_text_fmt(ui_SetTempFrac, "%d", getRoundedFrac(OperatingParameters.tempSet));
  }

  OperatingParameters.hvacCoolEnable = lv_obj_has_state(ui_HvacCoolCheckbox, LV_STATE_CHECKED);
  OperatingParameters.hvacFanEnable = lv_obj_has_state(ui_HvacFanCheckbox, LV_STATE_CHECKED);

  setHvacModesDropdown();
}

void LoadConfigSettings(lv_event_t * e)
{
  lv_label_set_text_fmt(ui_TempCorrectionLabel, "%.1f", OperatingParameters.tempCorrection);
  lv_slider_set_value(ui_TempCorrectionSlider, OperatingParameters.tempCorrection*10, LV_ANIM_OFF);
  lv_label_set_text_fmt(ui_TempSwingLabel, "%.1f", OperatingParameters.tempSwing);
  lv_slider_set_value(ui_TempSwingSlider, OperatingParameters.tempSwing*10, LV_ANIM_OFF);
  if (OperatingParameters.tempUnits == 'F')
    lv_obj_clear_state(ui_TempUnitsSwitch, LV_STATE_CHECKED);
  else
    lv_obj_add_state(ui_TempUnitsSwitch, LV_STATE_CHECKED);
  if (OperatingParameters.hvacCoolEnable)
    lv_obj_add_state(ui_HvacCoolCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_HvacCoolCheckbox, LV_STATE_CHECKED);
  if (OperatingParameters.hvacFanEnable)
    lv_obj_add_state(ui_HvacFanCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_HvacFanCheckbox, LV_STATE_CHECKED);
}

void LoadUncommonSettings(lv_event_t * e)
{
  lv_dropdown_set_selected(ui_TimezoneDropdown, OperatingParameters.timezone_sel);

  lv_slider_set_value(ui_UiSleepSlider, OperatingParameters.thermostatSleepTime, LV_ANIM_OFF);
  lv_label_set_text_fmt(ui_UiSleepLabel, "%d s", OperatingParameters.thermostatSleepTime);

  if (OperatingParameters.thermostatBeepEnable)
    lv_obj_add_state(ui_AudibleBeepCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_AudibleBeepCheckbox, LV_STATE_CHECKED);

  if (OperatingParameters.hvac2StageHeatEnable)
    lv_obj_add_state(ui_Hvac2StageHeatCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_Hvac2StageHeatCheckbox, LV_STATE_CHECKED);

  if (OperatingParameters.hvacReverseValveEnable)
    lv_obj_add_state(ui_RevValveCheckbox, LV_STATE_CHECKED);
  else
    lv_obj_clear_state(ui_RevValveCheckbox, LV_STATE_CHECKED);
}

void SaveUncommonConfigSettings(lv_event_t * e)
{
  OperatingParameters.timezone_sel = lv_dropdown_get_selected(ui_TimezoneDropdown);
  OperatingParameters.timezone = (char *)(gmt_timezones[OperatingParameters.timezone_sel]);
  OperatingParameters.hvacReverseValveEnable = lv_obj_has_state(ui_RevValveCheckbox, LV_STATE_CHECKED);
  OperatingParameters.hvac2StageHeatEnable = lv_obj_has_state(ui_Hvac2StageHeatCheckbox, LV_STATE_CHECKED);
  OperatingParameters.thermostatBeepEnable = lv_obj_has_state(ui_AudibleBeepCheckbox, LV_STATE_CHECKED);

  setHvacModesDropdown();
  updateTimezone();
}

void tftCalibrate(lv_event_t * e)
{
  tftCalibrateTouch();
  _ui_screen_change(ui_MainScreen, LV_SCR_LOAD_ANIM_MOVE_RIGHT, 500, 0);
  tftAwaken(e);
}

bool isCurrentScreenMain()
{
  if (lv_disp_get_scr_act(NULL) == ui_MainScreen)
    return true;
  else
    return false;
}