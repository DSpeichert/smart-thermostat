// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.3.0
// LVGL version: 8.3.6
// Project name: Thermostat

#include "thermostat.hpp"
#include "ui.h"
#include "version.h"

#define screenWidth 320

void tftUpdateTempSet(lv_event_t * e)
{
  char tmp[16];
  strncpy(tmp, lv_label_get_text(ui_SetTemp), sizeof(tmp));
  OperatingParameters.tempSet = atoi(tmp);
  tftWakeDisplay();
}

void tftHvacModeChange(lv_event_t * e)
{
  OperatingParameters.hvacSetMode = (HVAC_MODE)(lv_dropdown_get_selected(ui_ModeDropdown));
  tftWakeDisplay();
}

void tftAwaken(lv_event_t * e)
{
  tftWakeDisplay();
}

void tftStopTouchTimer(lv_event_t * e)
{
  tftDisableTouchTimer();
}

void tftBeep(lv_event_t * e)
{
  audioBeep();
}

void wifiScanner(void *pvParameters)
{
  WiFi_ScanSSID();

  lv_dropdown_set_options(ui_SsidDropdown, Get_WiFiSSID_DD_List());
  lv_label_set_text(ui_WifiStatusLabel, "Scan Done");
  ui_WifiStatusLabel_timestamp = millis();
  lv_obj_clear_state(ui_ScanBtn, LV_STATE_DISABLED);
  audioBeep();

  vTaskDelete(NULL);
}

TaskHandle_t ntScanTaskHandler = NULL;

static void networkScanner() {
  xTaskCreate(wifiScanner,
              "ScanWifiTask",
              4096,
              NULL,
              1,
              &ntScanTaskHandler);
}

void StartWifiScan(lv_event_t * e)
{
  audioBeep();
  lv_obj_add_state(ui_ScanBtn, LV_STATE_DISABLED);
  lv_label_set_text(ui_WifiStatusLabel, "Scanning...");

  // Scan for SSIDs. This is done synchronously, so complete it via a RTOS task.
  networkScanner();
}

void stopWifiScan(lv_event_t * e)
{
  if (ntScanTaskHandler != NULL)
  {
    vTaskDelete(ntScanTaskHandler);
    ntScanTaskHandler = NULL;
  }
  lv_label_set_text(ui_WifiStatusLabel, "Scan Aborted");
  ui_WifiStatusLabel_timestamp = millis();
  lv_obj_clear_state(ui_ScanBtn, LV_STATE_DISABLED);
}

#define LABEL_COLOR "#850808"

void LoadInfoStrings(lv_event_t * e)
{
  if (wifiConnected())
    lv_obj_add_state(ui_WifiConnCheckBox, LV_STATE_CHECKED);
	else
    lv_obj_clear_state(ui_WifiConnCheckBox, LV_STATE_CHECKED);
  lv_label_set_recolor(ui_WifiSsidLabel, true);
  lv_label_set_text_fmt(ui_WifiSsidLabel, "%s SSID:# %s", LABEL_COLOR, WifiCreds.ssid);

  lv_label_set_recolor(ui_HostnameLabel, true);
  lv_label_set_text_fmt(ui_HostnameLabel, "%s Hostname:# %s", LABEL_COLOR, WifiCreds.hostname);

  lv_label_set_recolor(ui_IPLabel, true);
  lv_label_set_text_fmt(ui_IPLabel, "%s IP:# %s", LABEL_COLOR, wifiAddress());

  lv_label_set_recolor(ui_RssiLabel, true);
  lv_label_set_text_fmt(ui_RssiLabel, "%s Signal:# %d%%", LABEL_COLOR, wifiSignal());

  lv_label_set_recolor(ui_FwVersionLabel, true);
  lv_label_set_text_fmt(ui_FwVersionLabel, "%s Firmware:# %s", LABEL_COLOR, VERSION_STRING);

  lv_label_set_recolor(ui_BuildDateLabel, true);
  lv_label_set_text_fmt(ui_BuildDateLabel, "%s Build date:# %s", LABEL_COLOR, VERSION_BUILD_DATE_TIME);

//  lv_label_set_long_mode(ui_CopyrightLabel, LV_LABEL_LONG_SCROLL_CIRCULAR);
  lv_obj_set_width(ui_CopyrightLabel, screenWidth - 2);
  lv_label_set_text_fmt(ui_CopyrightLabel, "%s", VERSION_COPYRIGHT);
}

void LoadConfigStrings(lv_event_t * e)
{
  lv_label_set_text_fmt(ui_TempCorrectionLabel, "%.1f", OperatingParameters.tempCorrection);
  lv_slider_set_value(ui_TempCorrectionSlider, OperatingParameters.tempCorrection*10, LV_ANIM_OFF);
  lv_label_set_text_fmt(ui_TempSwingLabel, "%.1f", OperatingParameters.tempSwing);
  lv_slider_set_value(ui_TempSwingSlider, OperatingParameters.tempSwing*10, LV_ANIM_OFF);
}

void tftUpdateTempCorrectionValue(lv_event_t * e)
{
  lv_obj_t * slider = lv_event_get_target(e);
  char buf[8];
  lv_snprintf(buf, sizeof(buf), "%.1f°", (float)lv_slider_get_value(slider)/10.0);
  lv_label_set_text(ui_TempCorrectionLabel, buf);
  OperatingParameters.tempCorrection = (float)lv_slider_get_value(slider)/10.0;
}

void tftUpdateTempSwingValue(lv_event_t * e)
{
  lv_obj_t * slider = lv_event_get_target(e);
  char buf[8];
  lv_snprintf(buf, sizeof(buf), "%.1f°", (float)lv_slider_get_value(slider)/10.0);
  lv_label_set_text(ui_TempSwingLabel, buf);
  OperatingParameters.tempSwing = (float)lv_slider_get_value(slider)/10.0;
}

void tftSetNewWifi(lv_event_t * e)
{
  lv_dropdown_get_selected_str(ui_SsidDropdown, WifiCreds.ssid, sizeof(WifiCreds.ssid));
  strcpy (WifiCreds.password, lv_textarea_get_text(ui_PSK));
  WifiDisconnect();
}

void tftClearPsk(lv_event_t * e)
{
  lv_textarea_set_text(ui_PSK, "");
}
